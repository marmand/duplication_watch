#! /usr/bin/python3

import psycopg2
import os
from threading import Thread
import hashlib
import time
import datetime

def update_dir(connection, paths):
    # Search in path new entries
    new_line_sql = """
        INSERT INTO find_duplicates.files (path, type, size, modification_time)
            VALUES
                (%(path)s, %(type)s, %(size)s, TO_TIMESTAMP(%(modification_time)s))
            ON CONFLICT (path) DO
            UPDATE
            SET
                size = %(size)s
                , modification_time = TO_TIMESTAMP(%(modification_time)s)
    """
    with connection:
        with connection.cursor() as cursor:
            for p in paths:
                try:
                    if os.path.exists(p):
                        statinfo = os.stat(p)
                        cursor.execute(new_line_sql,
                            {
                                'path': p,
                                'type': 'd',
                                'size': statinfo.st_size,
                                'modification_time': statinfo.st_mtime,
                            })
                        cursor.execute("UPDATE find_duplicates.files SET updated_at=NOW() WHERE path=%s", (p,))

                        for f in os.listdir(p):
                            t = 'NULL'
                            fullpath = os.path.join(p, f)
                            # print("Debug: ", fullpath)
                            if os.path.isfile(fullpath):
                                t = 'f'
                            elif os.path.isdir(fullpath):
                                t = 'd'
                            if os.path.islink(fullpath):
                                cursor.execute(new_line_sql,
                                    {
                                        'path': fullpath,
                                        'type': 'l',
                                        'size': '0',
                                        'modification_time': '0',
                                    })
                            else:
                                if t != 'NULL':
                                    statinfo = os.stat(fullpath)
                                    cursor.execute(new_line_sql,
                                        {
                                            'path': fullpath,
                                            'type': t,
                                            'size': statinfo.st_size,
                                            'modification_time': statinfo.st_mtime,
                                        })
                                else:
                                    print("Path has unknown type", fullpath)
                    else:
                        print("Path don't exists: ", p)
                        delete = "DELETE FROM find_duplicates.files WHERE path LIKE $${}%$$".format(p)
                        cursor.execute(delete)
                except FileNotFoundError as error:
                    print("File Not Found: ", error)
                except Exception as e:
                    print("Error on: ", p)
                    raise e

def handle_dir(connection):
    while True:
    # if True:
        limit = 10
        # Handle oldest dir
        with connection:
            with connection.cursor() as cursor:
                cursor.execute("SELECT updated_at FROM find_duplicates.files WHERE type='d' AND updated_at IS NOT NULL ORDER BY updated_at")
                last_dir_update = 0
                update_durations = []
                for row in cursor.fetchall():
                    (updated_at,) = row
                    if 0 != last_dir_update and updated_at != last_dir_update:
                        duration = updated_at - last_dir_update
                        update_durations.append(duration)
                    last_dir_update = updated_at
                avg_duration = sum(update_durations, datetime.timedelta()) / float(len(update_durations))
                limit = max(1, int(60 / avg_duration.seconds))

        for i in range(1, 10):
            paths = []
            with connection:
                with connection.cursor() as cursor:
                    cursor.execute("SELECT path from find_duplicates.files WHERE type='d' AND updated_at IS NOT NULL ORDER BY updated_at LIMIT %s", (limit,))
                    for row in cursor.fetchall():
                        paths.append(row[0])
            update_dir(connection, paths)
            paths = []

            # Handle some dirs that we never visited before
            with connection:
                with connection.cursor() as cursor:
                    cursor.execute("SELECT path from find_duplicates.files WHERE type='d' AND updated_at IS NULL")
                    for row in cursor.fetchall():
                        paths.append(row[0])
            update_dir(connection, paths)
            paths = []

def md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def handle_file(connection):
    update = """
        UPDATE find_duplicates.files
        SET md5sum=%s
            , updated_at = NOW()
        WHERE path=%s
    """
    sleep_time = 1
    while True:
    # if True:
        count = 0
        with connection:
            with connection.cursor() as cursor:
                # cursor.execute("SELECT path, size FROM find_duplicates.files WHERE md5sum IS NULL AND type='f' ORDER BY size DESC LIMIT 10")
                cursor.execute("SELECT path, size FROM find_duplicates.files WHERE md5sum IS NULL AND type='f' LIMIT 10")
                for row in cursor.fetchall():
                    (path, size) = row
                    count = count + 1
                    try:
                        cursor.execute(update, (md5(path), path))
                    except FileNotFoundError as error:
                        print("File Not Found: ", path)
                        cursor.execute("DELETE FROM find_duplicates.files WHERE path = %s", (path,))
                    except Exception as error:
                        print("Error on: ", path)
                        cursor.execute("DELETE FROM find_duplicates.files WHERE path = %s", (path,))

        with connection:
            with connection.cursor() as cursor:
                cursor.execute("SELECT path FROM find_duplicates.files WHERE type='f' AND updated_at < modification_time")
                for row in cursor.fetchall():
                    count = count + 1
                    cursor.execute(update, (md5(row[0]), row[0]))

        if count == 0:
            # Limit at 6h the time to sleep
            if sleep_time < 6 * 60 * 60:
                sleep_time = sleep_time + 1
            time.sleep(sleep_time)
        else:
            sleep_time = 1

connection = None
try:
    connection = psycopg2.connect("dbname=find_duplicates user=armand")
    dir_thread = Thread(target = handle_dir, args = (connection,))
    file_thread = Thread(target = handle_file, args = (connection,))
    dir_thread.start()
    file_thread.start()
    dir_thread.join()
    file_thread.join()

except psycopg2.DatabaseError as error:
    print(error)
finally:
    if connection is not None:
        connection.close()
